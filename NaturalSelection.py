"""
Natural Selection Post-Processing Script for Ultimaker Cura
-----------------------------------------------------------
Author: Felipe_Pukento
Date: [March 21, 2025]
Version: 1.0

Description:
This script allows users to customize the post-processing of G-code generated by Ultimaker Cura.
It includes features such as:
- Repeating the print process a specified number of times.
- Cooling the bed to a target temperature before moving the bed back.
- Adding custom G-code commands for post-processing, such as shaking the print or presenting it.

Settings:
- Cooling Temperature (°C): The target temperature to wait for before continuing.
- Repeat Count: The number of times to repeat the print process.
- Wait Time (seconds): The time to wait after turning off the bed heater.

Usage:
This script is intended to be used as a Cura post-processing plugin. It modifies the G-code after slicing
to include the specified customizations.

License:
This script is provided "as is" without warranty of any kind. Use at your own risk.
"""

from ..Script import Script

class NaturalSelection(Script):
    def __init__(self):
        super().__init__()

    def getSettingDataString(self):
        """
        Define the settings for the script that will appear in the Cura interface.

        Returns:
            str: JSON string defining the script settings.
        """
        return """{
            "name": "Natural Selection Post-Processing Script",
            "key": "NaturalSelection",
            "metadata": {},
            "version": 2,
            "settings": {
                "cooling_temp": {
                    "label": "Cooling Temperature (°C)",
                    "description": "Temperature to wait for before moving the bed back.",
                    "type": "int",
                    "default_value": 45,
                    "minimum_value": 0,
                    "maximum_value": 100
                },
                "repeat_count": {
                    "label": "Repeat Count",
                    "description": "Number of times to repeat the entire print process.",
                    "type": "int",
                    "default_value": 1,
                    "minimum_value": 1,
                    "maximum_value": 500
                },
                "wait_time": {
                    "label": "Wait Time (seconds)",
                    "description": "Time to wait after turning off the bed heater.",
                    "type": "int",
                    "default_value": 10,
                    "minimum_value": 1,
                    "maximum_value": 600
                }
            }
        }"""

    def execute(self, data):
        """
        Modify the G-code based on the user-defined settings.

        Args:
            data (list): The original G-code lines generated by Cura.

        Returns:
            list: The modified G-code lines.
        """
        # Retrieve user-defined settings
        cooling_temp = self.getSettingValueByKey("cooling_temp")
        repeat_count = self.getSettingValueByKey("repeat_count")
        wait_time_seconds = self.getSettingValueByKey("wait_time")
        
        # Convert wait time to milliseconds
        wait_time_ms = wait_time_seconds * 1000

        # Save the original G-code
        original_gcode = data[:]
        
        # Filter out unnecessary commands from the original G-code
        filtered_gcode = [
            line for line in original_gcode
            if not line.startswith(("M140 S0", "M104 S0", "M84", ";End of Gcode", "M220", "M221"))
        ]
        
        # Custom G-code to add at the end of each cycle
        custom_gcode = [
            "; Natural Selection Post-Processing Script Start",
            "G1 X110 Y215 Z160 F6000 ; Move to center and raise",
            "M140 S0 ; Turn off bed heating",
            "M106 S255 ; Turn on the layer fan at 100%",
            "G1 X110 Y215 Z1 F5000 ; Lower bed",
            f"M190 S{cooling_temp} ; Wait for bed to cool to {cooling_temp}°C",
            "M106 S0 ; Turn off the layer fan",
            f"G4 P{wait_time_ms} ; Wait for {wait_time_seconds} seconds",
            "G1 X110 Y15 Z1 F2400 ; Remove print",
            "G1 X110 Y20 Z1 F8000 ; Shake it out",
            "G1 X110 Y15 Z1 F8000 ; Shake it out",
            "G1 X110 Y20 Z1 F8000 ; Shake it out",
            "G1 X2 Y218 F3000 ; Present print"
        ]

        # Clear the original G-code and prepare the new one
        data.clear()

        # Set feedrate and flowrate at the beginning (only once)
        data.append("M220 S100 ; Set initial feedrate\n")
        data.append("M221 S100 ; Set initial flowrate\n")

        # Generate the repetitions
        for i in range(repeat_count):
            data.append(f"; Repeat cycle {i + 1}/{repeat_count}\n")
            data.append("G28 ; Home all axes\n")  # Re-home at the start of each cycle
            data.extend(filtered_gcode)  # Add the filtered original G-code
            for line in custom_gcode:  # Add the custom G-code
                data.append(line + "\n")
            data.append("; End of repeat cycle\n")

        return data
